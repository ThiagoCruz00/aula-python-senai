# -*- coding: utf-8 -*-
"""Aula11Maio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yReAcXFGxwnGVJ6gdm0KhCCkw9bYZ7PO

# LISTAS COMPOSTAS

> LISTAS DENTRO DE LISTAS

Podemos criar uma lista dessa forma:

> pessoas = [ ] com colchetes ou

> pessoas = list( ) com a função list

# Exercíco

Vamos criar uma lista de alunos do curso de Python

A lista deve conter o nome e a idade do aluno.

Ana com 22 anos

Manoel com 31 anos e

Zigoto com 40 anos
"""

# @title Exemplo de lista simples

 alunos = []

 alunos.append('Ana')
 alunos.append(22)

 print(alunos)

# @title Exemplo de criação de lista composta

turma = list() # Outro jeito de criar uma lista

print(turma)

turma.append(alunos[:]) # Inserindo a lista alunos na lista turma

print(turma)

"""Não esqueça da diferença de incluir uma cópia com [ : ]

Cada lista tem seu índice
"""

# Completando a lista composta

turma.append(['Manoel', 31]) # Inserindo outra lista
turma.append(['Zigoto', 40]) # Inserindo mais uma lista
print(turma)

print(turma[0][0])
print(turma[0][1])
print(turma[1][0])
print(turma[1][1])

# @title Apagando uma lista
print(turma)
#turma.pop() # Apaga o ultimo item da lista
turma.clear() # Apaga o conteúdo da lista
print(turma)

# @title Criando a lista de um outro jeito

print(turma)
turma = [['Ana', 22 , 'F'],['Manoel', 31 , 'M'] , ['Zigoto', 40 , 'M']]
print(turma)

# @title Interando pelos elementos da lista

print(turma)
for aluno in turma:
    print(f'{aluno[0]} tem {aluno[1]} anos e é do sexo {aluno[2]}')

"""Crie um programa que pede o nome e idade da cada pessoa insere em uma lista.

Use duas listas para conseguir isso.

Uma delas é a lista principal e outro será auxiliar.

Depois de obter os dados, apague os dados da lista auxiliar.
"""

# @title Inserindo dados com a ajuda do usuário

nave = list() # Lista principal
alien = list() # Lista auxiliar
for grey in range(0,3):  #Laço de 5 repetições
    alien.append(str(input('Digite o nome do alien:')))
    alien.append(int(input('Digite a idade do maluco: ')))
    print('Alien a bordo!')
    nave.append(alien[:])
    alien.clear()
print(nave)

"""Altere o exercício anterior e

exiba para cada alien se é maior ou menor de idade e

também a quantidade de maiores e menores de idade
"""

nave = list() # Lista principal
alien = list() # Lista auxiliar
for grey in range(0,):  #Laço de 5 repetições
    alien.append(str(input('Digite o nome do alien:\n')))
    alien.append(int(input('Digite a idade do maluco:\n ')))
    print('Alien a bordo!\n')
    nave.append(alien[:])
    alien.clear()
for e in nave:
    if alien[1] >= 18:
        print(f'{e[0]} é maior de idade')
        totalmaior += 1
    else:
        print(f'{e[0]} é menor de idade')
        totalmenor += 1
print(f'São {totalmaior} maiores e {totalmenor} menores nesta nave')

totalmaior = totalmenor = 0
nave = list() # Lista principal
alien = list() # Lista auxiliar
for grey in range(0,4):  #Laço de 5 repetições
    alien.append(str(input('Digite o nome do alien:\n')))
    alien.append(int(input('Digite a idade do maluco:\n ')))
    print('Alien a bordo!\n')
    nave.append(alien[:])
    alien.clear()
for alien in nave:
    if alien[1] >= 18:
        print(f'{alien[0]} é maior de idade')
        totalmaior += 1
    else:
        print(f'{alien[0]} é menor de idade')
        totalmenor += 1
print(f'São {totalmaior} maiores e {totalmenor} menores nesta nave')

"""# CONTAINERS EM PYTHON - DICIONÁRIO

Dicionários em Python são estruturas complexas.

São parecidos com tuplas e as listas pois armazenam muitos dados ao

mesmo tempo.

As listas e tuplas usam índices para acesso aos elemnetos.

Esses índices são números.

Os dicionários são acessados de forma diferente.

Podemos usar nomes para acessar os elementos dos dicionários.

> O acesso usa uma combinação chave : valor

> Chave = key

> Valor = value
"""

# @title Definição Tuplas, Listas e Dicionários

dados = tuple() # Como definir uma tupla, imutável
nome = [] # Como definir uma lista, versão 1
comidas = list() # Como definir uma lista, versão 2

pessoas = {} # Como definir um dicionário, versão 1
idades = dict() # Como definir um dicionário, versão 2

# @ title Criando uma lista e revendo o seu acesso

lista = list() # Criando uma lista vazia
lista.append('Marcos') # Adicionando um elemento a lista
lista.append(18) # Adicionando outro elemento a lista

# A lista vai conter 2 elementos , o elemento indice 0 e o elemento indice 1

print(lista[0]) # O valor a ser exibido é Marcos

"""Criando o nosso primeiro dicionário"""

# Nosso dicionário

aurelio = {} # Criando um dicionário
aurelio = {'Nome': 'Pedro', 'Idade': 23}
print(aurelio)

print(aurelio['Nome'])
print(aurelio['Idade'])

print('telefone' in aurelio)
print('Nome' in aurelio)
print('nome' in aurelio)

# @title Adicionando um outro elemento ao dicionário:

# aurelio.append('sobrenome') não funciona com dicionário

aurelio['Sobrenome'] = 'Santos' # Adicionar outro elemento
print(aurelio)

# Adicionar outro elemento

aurelio['Sexo'] = 'M' # Adicionar mais um elemento
print(aurelio)

# @title apagando um elemento do dicionário

del aurelio['Sexo'] # apagando um elemento
print(aurelio)

"""Acessando os componentes do dicionário:

> Keys

> Values

> Items
"""

# @title Acessando os componentes do dicionário:

print(aurelio, '\n')  # Exibir o conteúdo do dicionário
aurelio['Idade'] = 22 # Alterando um elemento
print(aurelio)
aurelio['Turma'] = 'I139' # Adicionando um elemento
print(aurelio,'\n')

print(aurelio.keys()) # Acessando as chaves
print()
print(aurelio.values()) # Acessando os valores
print()
print(aurelio.items()) # Acessando os itens
print()

# @title Percorrendo os elemntos do dicionário: Chaves

print(aurelio)
for chave in aurelio.keys():
    print(chave)

# @title Percorrendo os elementos do dicionário: Valores

print(aurelio)
for valores in aurelio.values():
    print(valores)

# @title Percorrendo os elementos do dicionário: Itens

print(aurelio)
for chave, valores in aurelio.items():
    print(f'{chave} é {valores}')

"""# Dicionários podem pertencer a listas

Crie um dicionário chamado "Filme" para um fã de filmes de ficção cientifica com:

Título = 'Star Wars'

Ano = 1977

Diretor = 'George Lucas'
"""

filme = {'Titulo' : 'Star Wars', 'Ano' : 1977, 'Diretor' : 'George Lucas'}
print(filme)

"""Exercíco: Crie um programa que itera pelos elementos do dicionário e

exiba o conteúdo na forma:

O título é Star Wars

O ano 1977

O diretor é Geroge Lucas
"""

print(filme)
for chave,valores in filme.items():
    print(f'O {chave} é {valores}')

# Exmplo de iteração pelo dicionário

for chave, valor in filme.items():
    print(f'O {chave} é {valor}')

"""Crie uma lista chamada "Locadora" que contenha os seguintes elementos:

Título = 'Star Wars'

Ano = 1977

Diretor = 'George Lucas'

---

Título = 'Superman'

Ano = 1978

Diretor = 'Richard Donner'

---

Título = 'Matrix'

Ano = 1999

Diretor = 'OS irmãos Whachowsky'
"""

locadora = list()

locadora.append({'Titulo' : 'Star Wars', 'Ano' : 1977, 'Diretor' : 'George Lucas'})
locadora.append({'Titulo' : 'Superman', 'Ano' : 1978, 'Diretor' : 'Richard Donner'})
locadora.append({'Titulo' : 'Matrix', 'Ano' : 1999, 'Diretor' : 'OS irmãos Whachowsky'})

print(locadora)
print(locadora[0])
print(locadora[1])
print(locadora[2])

print(locadora[0]['Titulo'])
locadora.pop()

# Iterar pelo lista e o dicionário

for filme in locadora:
    print(f'O nome do filme é {filme["Titulo"]} criado em {filme["Ano"]} pelo diretor {filme["Diretor"]}')

"""Crie um dicionário chamado "Tabela" que contenha preços de mercadorias:

Alface R$0,45

Batata R$1,20

Tomate R$2,30

Feijão R$1,50
"""

tabela = {'Alface' : 0.45, 'Batata' : 1.20, 'Tomate' : 2.30, 'Feijão' : 1.50}
for chave, valores in tabela.items():
    print(f'O preço do {chave} é R${valores:.2f}')

# Exemplo de código que cria um dicionário

t = dict()
t['alface'] = 0.45
t['batata'] = 1.20
t['tomate'] = 2.30
t['feijao'] = 1.50
print(t)

for produto, preco in t.items():
    print(f'O {produto} custa R${preco:.2f}')

"""# FUNÇÕES EM PYTHON

Funções em Python são usadas para ecnomizar tempo esforço.

Cuidam da rotina do código.

Quando um bloco de código precisa ser repetido muitas vezes,

melhor criar uma função que faz isso.

Outro uso da função é esconder os detalhesda execução do código
"""

# @title Uma Função Simples

# Essa função exibe uma mensagem simples pré-definida
# Essa parte é a definição da função

def inicio():
    print('                Inicio do Programa..............             \n')
def fim():
    print('                Fim do Programa..............             \n')
# Para usarmos a funçaõ é preciso chamar a função, usar a o nome dela em seguida por parênteses

inicio()
fim()

# Exemplo de código invocando funçoes anteriormente

inicio()

fim()

"""# Cuidado! A função só pode ser usada depois de ter sido criada"""

# Exemplo de tentativa da função antes de ser definida

exemplo() #Invocando a função exemplo.... que não foi declarada

def exemplo():
    print('Função já definida.... aproveite bem!')

"""# Funções com parâmetros

Modifique a função "Inicio" para ela exiba, ou use, um parâmetro
"""

# Modificação da função "Inicio"

def inicio(mensagem):
    print(f'                {mensagem}          \n')

def fim(msg):
    print(f'                {msg}             \n')

inicio('Boa tarde SENAI!')
fim('Obrigado por utilizar nosso programa!')

"""# Funções podem retornar valores ou resultados"""

# @title Função de exemplo - Somar dois números

# Declaração da função

def soma(num1 = 0, num2 = 0):  # Assinatura da função com valores padrão
    return print(f'A soma de {num1} e {num2} é igual a {num1 + num2}')  # Retorno da função
soma(5,9) # Os parâmetros num1 e num 2 são posicionais, num1 é o primeiro e num2 é o segundo

# Exemplo de passagem de parâmetros posicionais

soma(num2 = 5, num1 = 9) # Declarando os valores de num1 e num2

soma(7)

# @title Função de exemplo - Subtrair dois números

def subtrai(num1 = 0, num2 = 0):
    return num1 - num2

subtrai()