# -*- coding: utf-8 -*-
"""25deMaio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14uOGmBbp5yCyZqc-1YGUAyLtKCs2SgGE

# PROGRAMAÇÃO ORIENTADA A OBJETOS EM PYTHON
"""

# @title Um exemplo prartico de criação de classe

class Pessoa:
    def __init__(self, nome:str, idade:int, altura:float):
      self.nome = nome
      self.idade = idade
      self.altura = altura

    def dizer_ola(self):
        print(f'Olá, meu nome é {self.nome}\n')
        print(f'Minha idade é {self.idade}\n')
        print(f'Minha altura é {self.altura}\n')

    def cozinhar(self, receita:str):
        print(f'Estou cozinhando um(a) {receita}')

    def andar(self, distancia:float):
        print(f'Sai para andar. Volto depois de completar {distancia} metros...')

# Criar uma instância da classe Pessoa

um_mano = Pessoa(nome = 'Rafael', idade = 20, altura = 1.80)

# Invocando os métodos de Pessoa

um_mano.dizer_ola()
um_mano.cozinhar('Arroz')
um_mano.andar(1543.3)

youtuber = Pessoa(nome = 'A lenda', idade = 34, altura = 1.70)

youtuber.dizer_ola()

# @title Outro exemplo de código ue cria uma classe

class Televisao():    # Criando a classe
    def __init__(self):  # Um método especial chamado const
        self.ligada = False  # Um atributo do objeto
        self.canal = 2   # Um outro atributo do objeto

# @title Exemplo de criação de uma instância - Uma cópia do objeto

smart = Televisao()

smart.ligada

smart.canal

tv_da_sala = Televisao()

# @title Exemplo de alteração de valor de atributo

tv_da_sala.ligada = True
tv_da_sala.ligada

tv_da_sala.canal = 3
tv_da_sala.canal

print(f'O canal da smart é o {smart.canal}')
print(f'O canal da tv da sala é o {tv_da_sala.canal}')

# @title Associar um novo comportamento

class Televisao():    # Criando a classe
    def __init__(self):  # Um método especial chamado const
        self.ligada = False  # Um atributo do objeto
        self.canal = 2   # Um outro atributo do objeto

    def mudar_canal_para_baixo(self):  # Um novo método
        self.canal -= 1

    def mudar_canal_para_cima(self):  # Um outro novo método
        self.canal += 1

nova_tv = Televisao()

nova_tv.ligada

nova_tv.canal

print(f'Antes de mudar de canal, nova_tv no canal {nova_tv.canal}\n')

nova_tv.mudar_canal_para_cima()
print(f'Depois de mudar de canal, nova_tv está no canal {nova_tv.canal}\n')

print(f'Antes de mudar de canal, nova_tv no canal {nova_tv.canal}\n')

nova_tv.mudar_canal_para_baixo()
print(f'Depois de mudar de canal, nova_tv está no canal {nova_tv.canal}\n')

# @title Modificar um construtor

class Televisao():                  # Criando a classe
    def __init__(self, min, max):   # Um método especial chamado const
        self.ligada = False         # Um atributo do objeto
        self.canal = 2             # Um outro atributo do objeto
        self.cmin = min
        self.cmax = max

    def mudar_canal_para_baixo(self):  # Um novo método
        if sefl.canal - 1 >= self.cmin:
           self.canal -= 1
           print('Canal alterado!')
        else:
           print('Não foi possível mudar de canal!')
    def mudar_canal_para_cima(self):  # Um outro novo método
        if self.canal + 1 <= self.cmax:  # Testa se dentro do limite
           self.canal += 1
           print('Canal alterado!')
        else:
           print('Você chegou no limite dos canais')

tv_da_copa = Televisao(0,15)

nova_tv.mudar_canal_para_baixo()

for c in range(0,18):
    tv_da_copa.mudar_canal_para_cima()
    print(f'\nCanal atual: {tv_da_copa.canal}')